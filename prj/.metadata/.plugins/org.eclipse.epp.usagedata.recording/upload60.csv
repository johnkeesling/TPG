what,kind,bundleId,bundleVersion,description,time
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.deleteNextWord",1298843019883
executed,command,org.eclipse.ui,3.6.1.M20100826-1330,"org.eclipse.ui.edit.delete",1298843020266
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.deleteNextWord",1298843021993
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.deleteNextWord",1298843022223
executed,command,org.eclipse.ui,3.6.1.M20100826-1330,"org.eclipse.ui.edit.delete",1298843022582
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.deleteNextWord",1298843024304
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.deleteNextWord",1298843024609
executed,command,org.eclipse.ui,3.6.1.M20100826-1330,"org.eclipse.ui.edit.delete",1298843024983
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.deleteNextWord",1298843026415
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.deleteNextWord",1298843026671
executed,command,org.eclipse.ui,3.6.1.M20100826-1330,"org.eclipse.ui.edit.delete",1298843027053
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.deleteNextWord",1298843028771
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.deleteNextWord",1298843029017
executed,command,org.eclipse.ui,3.6.1.M20100826-1330,"org.eclipse.ui.edit.delete",1298843029413
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.deleteNextWord",1298843030961
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.deleteNextWord",1298843031249
executed,command,org.eclipse.ui,3.6.1.M20100826-1330,"org.eclipse.ui.edit.delete",1298843031701
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordNext",1298843034019
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordNext",1298843034185
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordNext",1298843034350
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordNext",1298843034509
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordNext",1298843034658
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordNext",1298843034925
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordNext",1298843034962
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordNext",1298843034994
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordNext",1298843035031
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordNext",1298843035068
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordNext",1298843035105
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordNext",1298843035143
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordNext",1298843035351
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordNext",1298843035499
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordNext",1298843035761
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordNext",1298843035798
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordNext",1298843035835
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordNext",1298843035872
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordNext",1298843035909
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordNext",1298843035947
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordNext",1298843036250
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordNext",1298843036432
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordNext",1298843036592
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordNext",1298843036768
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.deleteNextWord",1298843037923
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.deleteNextWord",1298843038079
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.deleteNextWord",1298843038466
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordPrevious",1298843042212
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordPrevious",1298843042467
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordPrevious",1298843042505
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordPrevious",1298843042542
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordPrevious",1298843042580
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordPrevious",1298843042617
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordPrevious",1298843042654
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordPrevious",1298843042691
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordPrevious",1298843042729
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordPrevious",1298843042766
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.deleteNextWord",1298843044235
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.deleteNextWord",1298843044437
executed,command,org.eclipse.ui,3.6.1.M20100826-1330,"org.eclipse.ui.edit.delete",1298843044817
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.deleteNextWord",1298843046467
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.deleteNextWord",1298843046703
executed,command,org.eclipse.ui,3.6.1.M20100826-1330,"org.eclipse.ui.edit.delete",1298843047086
executed,command,org.eclipse.ui,3.6.1.M20100826-1330,"org.eclipse.ui.file.save",1298843047986
executed,command,org.eclipse.ui,3.6.1.M20100826-1330,"org.eclipse.ui.file.save",1298843093721
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.deletePreviousWord",1298843113460
executed,command,org.eclipse.ui,3.6.1.M20100826-1330,"org.eclipse.ui.file.save",1298843178004
activated,view,org.eclipse.jdt.ui,3.6.1.r361_v20100825-0800,"org.eclipse.jdt.ui.PackageExplorer",1298843181670
deactivated,workbench,org.eclipse.ui.workbench,3.6.1.M20100826-1330,"",1298843184362
activated,workbench,org.eclipse.ui.workbench,3.6.1.M20100826-1330,"",1298843186294
executed,command,org.eclipse.ui,3.6.1.M20100826-1330,"org.eclipse.ui.edit.delete",1298843186312
deactivated,workbench,org.eclipse.ui.workbench,3.6.1.M20100826-1330,"",1298843190398
activated,workbench,org.eclipse.ui.workbench,3.6.1.M20100826-1330,"",1298843192129
executed,command,org.eclipse.ui,3.6.1.M20100826-1330,"org.eclipse.ui.edit.delete",1298843192209
activated,editor,org.eclipse.jdt.ui,3.6.1.r361_v20100825-0800,"org.eclipse.jdt.ui.CompilationUnitEditor",1298843196244
deactivated,workbench,org.eclipse.ui.workbench,3.6.1.M20100826-1330,"",1298843203949
executed,command,org.eclipse.ui,3.6.1.M20100826-1330,"org.eclipse.ui.edit.findReplace",1298843204021
activated,workbench,org.eclipse.ui.workbench,3.6.1.M20100826-1330,"",1298843206106
deactivated,workbench,org.eclipse.ui.workbench,3.6.1.M20100826-1330,"",1298843207059
executed,command,org.eclipse.ui,3.6.1.M20100826-1330,"org.eclipse.ui.edit.findReplace",1298843207127
activated,workbench,org.eclipse.ui.workbench,3.6.1.M20100826-1330,"",1298843209415
executed,command,org.eclipse.debug.ui,3.6.1.v20100901_r361,"org.eclipse.debug.ui.commands.RunLast",1298843217340
deactivated,workbench,org.eclipse.ui.workbench,3.6.1.M20100826-1330,"",1298843223658
activated,workbench,org.eclipse.ui.workbench,3.6.1.M20100826-1330,"",1298843246229
activated,view,org.eclipse.ui.console,3.5.0.v20100526,"org.eclipse.ui.console.ConsoleView",1298843248129
activated,editor,org.eclipse.jdt.ui,3.6.1.r361_v20100825-0800,"org.eclipse.jdt.ui.CompilationUnitEditor",1298843254916
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordPrevious",1298843288576
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordPrevious",1298843288715
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordPrevious",1298843288906
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.lineEnd",1298843289554
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordPrevious",1298843324720
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordPrevious",1298843324981
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordPrevious",1298843325023
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordPrevious",1298843325060
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordPrevious",1298843325093
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordPrevious",1298843325130
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordPrevious",1298843325167
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordPrevious",1298843325492
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordPrevious",1298843325679
executed,command,org.eclipse.ui,3.6.1.M20100826-1330,"org.eclipse.ui.file.save",1298843331217
executed,command,org.eclipse.debug.ui,3.6.1.v20100901_r361,"org.eclipse.debug.ui.commands.RunLast",1298843333210
deactivated,workbench,org.eclipse.ui.workbench,3.6.1.M20100826-1330,"",1298843338942
activated,workbench,org.eclipse.ui.workbench,3.6.1.M20100826-1330,"",1298844644607
deactivated,workbench,org.eclipse.ui.workbench,3.6.1.M20100826-1330,"",1298844646609
activated,workbench,org.eclipse.ui.workbench,3.6.1.M20100826-1330,"",1298844649192
activated,view,org.eclipse.ui.console,3.5.0.v20100526,"org.eclipse.ui.console.ConsoleView",1298844650817
deactivated,workbench,org.eclipse.ui.workbench,3.6.1.M20100826-1330,"",1298844653233
activated,workbench,org.eclipse.ui.workbench,3.6.1.M20100826-1330,"",1298846740995
activated,editor,org.eclipse.jdt.ui,3.6.1.r361_v20100825-0800,"org.eclipse.jdt.ui.CompilationUnitEditor",1298846748039
deactivated,workbench,org.eclipse.ui.workbench,3.6.1.M20100826-1330,"",1298846761628
activated,workbench,org.eclipse.ui.workbench,3.6.1.M20100826-1330,"",1298846794996
deactivated,workbench,org.eclipse.ui.workbench,3.6.1.M20100826-1330,"",1298846816198
activated,workbench,org.eclipse.ui.workbench,3.6.1.M20100826-1330,"",1298846816549
deactivated,workbench,org.eclipse.ui.workbench,3.6.1.M20100826-1330,"",1298846816846
activated,workbench,org.eclipse.ui.workbench,3.6.1.M20100826-1330,"",1298846843413
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.select.lineStart",1298846844820
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.deletePreviousWord",1298846858602
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.deletePreviousWord",1298846858863
deactivated,workbench,org.eclipse.ui.workbench,3.6.1.M20100826-1330,"",1298846860714
activated,workbench,org.eclipse.ui.workbench,3.6.1.M20100826-1330,"",1298846861609
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.select.lineEnd",1298846872906
executed,command,org.eclipse.ui,3.6.1.M20100826-1330,"org.eclipse.ui.edit.copy",1298846873763
executed,command,org.eclipse.ui,3.6.1.M20100826-1330,"org.eclipse.ui.edit.paste",1298846874517
executed,command,org.eclipse.ui,3.6.1.M20100826-1330,"org.eclipse.ui.file.save",1298846889291
deactivated,workbench,org.eclipse.ui.workbench,3.6.1.M20100826-1330,"",1298846941257
activated,workbench,org.eclipse.ui.workbench,3.6.1.M20100826-1330,"",1298846964626
deactivated,workbench,org.eclipse.ui.workbench,3.6.1.M20100826-1330,"",1298846967324
activated,workbench,org.eclipse.ui.workbench,3.6.1.M20100826-1330,"",1298846970060
deactivated,workbench,org.eclipse.ui.workbench,3.6.1.M20100826-1330,"",1298846996795
activated,workbench,org.eclipse.ui.workbench,3.6.1.M20100826-1330,"",1298846998278
deactivated,workbench,org.eclipse.ui.workbench,3.6.1.M20100826-1330,"",1298847000584
activated,workbench,org.eclipse.ui.workbench,3.6.1.M20100826-1330,"",1298847007229
deactivated,workbench,org.eclipse.ui.workbench,3.6.1.M20100826-1330,"",1298847009713
activated,workbench,org.eclipse.ui.workbench,3.6.1.M20100826-1330,"",1298847012377
deactivated,workbench,org.eclipse.ui.workbench,3.6.1.M20100826-1330,"",1298847028843
activated,workbench,org.eclipse.ui.workbench,3.6.1.M20100826-1330,"",1298847033054
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.textStart",1298847040008
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.lineEnd",1298847052989
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.lineEnd",1298847064512
deactivated,workbench,org.eclipse.ui.workbench,3.6.1.M20100826-1330,"",1298847078622
activated,workbench,org.eclipse.ui.workbench,3.6.1.M20100826-1330,"",1298847081459
deactivated,workbench,org.eclipse.ui.workbench,3.6.1.M20100826-1330,"",1298847083416
activated,workbench,org.eclipse.ui.workbench,3.6.1.M20100826-1330,"",1298847085005
executed,command,org.eclipse.jdt.ui,3.6.1.r361_v20100825-0800,"org.eclipse.jdt.ui.edit.text.java.organize.imports",1298847100367
deactivated,workbench,org.eclipse.ui.workbench,3.6.1.M20100826-1330,"",1298847104281
activated,workbench,org.eclipse.ui.workbench,3.6.1.M20100826-1330,"",1298847109060
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordPrevious",1298847109644
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordPrevious",1298847109832
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordPrevious",1298847110007
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordPrevious",1298847110161
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordPrevious",1298847110326
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordPrevious",1298847110576
executed,command,org.eclipse.jdt.ui,3.6.1.r361_v20100825-0800,"org.eclipse.jdt.ui.edit.text.java.organize.imports",1298847116394
executed,command,org.eclipse.ui,3.6.1.M20100826-1330,"org.eclipse.ui.file.save",1298847117717
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.lineEnd",1298847122060
executed,command,org.eclipse.ui,3.6.1.M20100826-1330,"org.eclipse.ui.file.save",1298847144576
deactivated,workbench,org.eclipse.ui.workbench,3.6.1.M20100826-1330,"",1298847151595
activated,workbench,org.eclipse.ui.workbench,3.6.1.M20100826-1330,"",1298847228079
deactivated,workbench,org.eclipse.ui.workbench,3.6.1.M20100826-1330,"",1298847231883
activated,workbench,org.eclipse.ui.workbench,3.6.1.M20100826-1330,"",1298847294799
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.deletePreviousWord",1298847353853
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordPrevious",1298847426442
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordPrevious",1298847426704
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordPrevious",1298847426741
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordPrevious",1298847426777
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordPrevious",1298847426814
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordPrevious",1298847426852
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordPrevious",1298847427096
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.deletePreviousWord",1298847427480
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordNext",1298847428726
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordNext",1298847429195
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.deletePreviousWord",1298847429960
executed,command,org.eclipse.ui,3.6.1.M20100826-1330,"org.eclipse.ui.edit.undo",1298847433425
executed,command,org.eclipse.ui,3.6.1.M20100826-1330,"org.eclipse.ui.edit.undo",1298847433889
executed,command,org.eclipse.ui,3.6.1.M20100826-1330,"org.eclipse.ui.edit.undo",1298847434277
executed,command,org.eclipse.ui,3.6.1.M20100826-1330,"org.eclipse.ui.edit.undo",1298847434795
executed,command,org.eclipse.ui,3.6.1.M20100826-1330,"org.eclipse.ui.edit.undo",1298847435503
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.lineEnd",1298847436514
deactivated,workbench,org.eclipse.ui.workbench,3.6.1.M20100826-1330,"",1298847502130
activated,workbench,org.eclipse.ui.workbench,3.6.1.M20100826-1330,"",1298847554171
executed,command,org.eclipse.ui,3.6.1.M20100826-1330,"org.eclipse.ui.edit.delete",1298847586183
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.select.lineEnd",1298847608204
executed,command,org.eclipse.ui,3.6.1.M20100826-1330,"org.eclipse.ui.edit.copy",1298847609721
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.lineEnd",1298847616332
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.select.lineStart",1298847616640
executed,command,org.eclipse.ui,3.6.1.M20100826-1330,"org.eclipse.ui.edit.paste",1298847617317
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.toggleOverwrite",1298847646649
executed,command,org.eclipse.ui,3.6.1.M20100826-1330,"org.eclipse.ui.edit.delete",1298847646668
executed,command,org.eclipse.ui,3.6.1.M20100826-1330,"org.eclipse.ui.edit.delete",1298847647258
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.toggleOverwrite",1298847650291
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.lineEnd",1298847659534
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.select.lineStart",1298847672764
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordPrevious",1298847687590
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordPrevious",1298847687795
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.wordPrevious",1298847687990
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.lineEnd",1298847689389
error,log,,,"Exception occurred during compilation unit conversion:\r\n----------------------------------- SOURCE BEGIN -------------------------------------\r\npackage edu.washington.ling;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.net.HttpURLConnection;\r\nimport java.net.URL;\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\nimport javax.servlet.http.HttpServlet;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\nimport org.json.JSONArray;\r\nimport org.json.JSONObject;\r\n\r\n/*\r\n *  Authors: John Keesling and Anthony Wong\r\n *  Created for: Ling 575 - NLP on Mobile Devices\r\n * \r\n *  TPG_ServerServlet contains nearly all server-side processing components for the \r\n *  Twitter-based Play-by-play generator.  Among other things, it contains:\r\n *  1. A GET call to the Twitter Search API, which returns results in JSON format\r\n *  2. JSON processing to extract Tweet and timestamp information\r\n *  3. A sentence ranker that assigns scores to each Tweet based on a set of heuristics\r\n *  4. A redundancy remover that eliminates the most redundant sentences from output\r\n *  etc.  \r\n */\r\n\r\n@SuppressWarnings(""serial"")\r\npublic class TPG_ServerServlet extends HttpServlet {\r\n\t\r\n    private static final String ENCODING = ""UTF-8""; \r\n\tprivate static final String URL_BASE = ""http://search.twitter.com/search.json?q=%23"";\r\n\tprivate static final String MY_SITE = ""http://localhost:8888/"";\r\n\tpublic String otpt = """";\r\n\t\r\n\t/*\r\n\t *  QUERY is currently manually generated and maintained using WordNet relations.\r\n\t *  We chose to do this all manually in order to maximize the ease in which we could\r\n\t *  test different queries.  \r\n\t *  \r\n\t *  QUERY_COUNTS is an array that contains a corresponding int value for each query string.\r\n\t *  In rankSentences() below, each QUERY_COUNTS int is increased for each occurrence of a \r\n\t *  query term.  This is for use in a calculation of tf-idf (or just one or the other).\r\n\t */\r\n\tprivate static final String[] QUERY = {""shot"", ""attempt"", ""effort"", ""goal"", ""score"", ""assist"", ""play"", ""maneuver"", ""turnover"", ""penalty"", ""disadvantage"", ""powerplay"", ""block"", ""stop""};\r\n\tint[] QUERY_COUNTS = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\r\n\tdouble[] QUERY_IDFS = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};\r\n\t\r\n\t/* \r\n\t *  loadTwitter() calls the Twitter Search API and processes the JSON output.\r\n\t *  This occurs 15 times, as Twitter allows for a maximum of 15 pages of search results.\r\n\t *  Its parameters are determined by the query contained in the call to the server \r\n\t *  from the mobile device.  That step is contained in the doGet() method below.\r\n\t */\r\n\t\r\n\tprotected String loadTwitter(String teamName, String Date, String untilDate) {\r\n\t\tString result = """";\r\n\t\tString completeURL = URL_BASE + teamName + ""+since:"" + Date + ""&rpp=100"";\r\n\t\t\r\n\t\tfor (int p = 1; p < 6; p++) {\r\n\t\t\tint pageNum = p;\r\n\t\t\tcompleteURL = completeURL + ""&page="" + Integer.toString(pageNum);\r\n\t\t\t\r\n\t\t\t// Create and open the connection\r\n\t\t\ttry {\r\n\t\t\t\tHttpURLConnection conn = (HttpURLConnection) new URL(completeURL).openConnection();\r\n\t\t\t\tconn.setRequestProperty(""User-Agent"", ""Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.2.8) Gecko/20100722 Firefox/3.6.8"");\r\n\t\t\t\tconn.setRequestProperty(""REFERER"", MY_SITE);\r\n\t\t\t\tconn.setDoInput(true);\r\n\t\t\t\tconn.setDoOutput(true);\r\n            \r\n\t\t\t\t// Read in the input stream and process the JSON output\r\n\t\t\t\ttry {\r\n\t\t\t\t\tInputStream is = conn.getInputStream();\r\n\t\t\t\t\tString rawResult = makeResult(is);\r\n\t\t\t\t\tJSONObject JSONresult = new JSONObject(rawResult);\r\n\t\t\t\t\tString results = JSONresult.getString(""results"");\r\n\t\t\t\t\tJSONArray resultsArray = new JSONArray(results);\r\n\r\n\t\t\t\t\t// process the JSON object a bit more\r\n\t\t\t\t\tfor (int i = 0; i < resultsArray.length(); i++) {\r\n\t\t\t\t\t\tJSONObject curObj = resultsArray.getJSONObject(i);\r\n\t\t\t\t\t\tString curTweet = curObj.getString(""text"");\r\n\t\t\t\t\t\tresult = result + ""&&&"" + curTweet; \r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// close the connection etc.\r\n\t\t\t\t} finally {\r\n\t\t\t\t\tconn.getInputStream().close();\r\n\t\t\t\t\tif (conn.getErrorStream() != null)\r\n\t\t\t\t\t\tconn.getErrorStream().close();\r\n\t\t\t\t}\r\n\t\t\t} catch (Exception e) {\r\n\t\t\t}\r\n\t\t}\r\n        return result;\r\n\t}\r\n\t\r\n\t/*\r\n\t * rankSentences() contains the sentence ranking algorithm.  Among other things, this\r\n\t * might contain simple heuristics such as a comparison of timestamps (that would, for\r\n\t * example, prevent many Tweets that are in response to the same in-game event), an\r\n\t * implementation of TF-IDF (or just one or the other, depending on performance), and\r\n\t * other things that remain to be determined.\r\n\t * \r\n\t *   @param tweets\r\n\t *   @return an array of Tweets sorted by their score value (note that the code to return\r\n\t *   a string object has been commented out)\r\n\t */\r\n\t\r\n\tprotected Tweet[] rankSentences(String tweets) throws Exception {\r\n\t\t\r\n\t\t/*\r\n\t\t *  Note that this code contains two input schemas -- one for actually calling the\r\n\t\t *  Twitter Search API and one for loading the TPG_Server/war/test_input.txt file. \r\n\t\t *  This is made available to avoid being blacklisted by Twitter's search abuse police.\r\n\t\t *  To do one or the other might require more than just commenting out a block of code\r\n\t\t *  and uncommenting another.  If you encounter any problems, let John Keesling know.\r\n\t\t *  \r\n\t\t *  Also note that int[] scores is currently unused and most likely unnecessary.\r\n\t\t */\r\n\t\t\r\n\t\tTweet[] sents = new Tweet[501]; // this is a temp size initializer for String that should depend on the number of search results from twitter or something\r\n\t\tint[] scores = new int[501]; // also a temp size initializer\r\n\t\tString result = """";\r\n\t\tint numLines = 0;\r\n\t\t\r\n\t\t// the code below is only relevant for testing, when not querying from twitter\r\n\t\t/*\r\n\t\tString curPath = new File(""."").getCanonicalPath();\r\n\t\tString test_inputPath = curPath + ""/test_input.txt"";\r\n\t\tFile inputFile = new File(test_inputPath);\r\n\t\tScanner sc = new Scanner(inputFile);\r\n\t\t\r\n\t\t\r\n\t\tScanner sc = new Scanner(tweets);\r\n\t\t\r\n\t\t// assign a score to each sent, create a Tweet object for them, and put it in the corresponding cell in sents \r\n\t\twhile (sc.hasNextLine()) {\r\n\t\t\tint score = 0;\r\n\t\t\tString curLine = sc.nextLine();\r\n\t\t\tString[] words = curLine.split("" "");\r\n\t\t*/\r\n\t\t// this portion was only relevant for testing; everything below this point is relevant for everything else\r\n\t\t\r\n\t\t// the following code is only relevant for parsing real Twitter output\r\n\t\tString[] lines = tweets.split(""&&&"");\r\n\t\t\r\n\t\t\r\n\t\tfor (int u = 0; u < lines.length; u++) {\r\n\t\t\tint score = 0;\r\n\t\t\tString curLine = lines[u];\r\n\t\t\tString[] words = curLine.split("" "");\r\n\t\t\t\r\n\t\t\t// the portion above was only relevant for actually loading from the Twitter Search API\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t *  Assign scores to each Tweet and make a Tweet object that contains both the \r\n\t\t\t *  String message and the score.  This currently just compares each word in the\r\n\t\t\t *  Tweet to each word in the predefined QUERY.  However, this will later contain\r\n\t\t\t *  the other heuristics.  \r\n\t\t\t */\r\n\t\t\t\r\n\t\t\tfor (int i=0; i < words.length; i++) {\r\n\t\t\t\tfor (int j=0; j < QUERY.length; j++) {\r\n\t\t\t\t\tString curWord = words[i].toLowerCase().replace(""?"", """").replace(""."", """").replace("","", """"); // make it lowercase and strip punctuation\r\n\t\t\t\t\tString curQueryWord = QUERY[j];\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (curWord.equals(curQueryWord)) {\r\n\t\t\t\t\t\tscore++;\r\n\t\t\t\t\t\tQUERY_COUNTS[j] = QUERY_COUNTS[j]++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t/*  bug note: for some reason, a blank line was getting through.  it was \r\n\t\t\t\t *  proving difficult to handle, so i dealt with it by changing the string\r\n\t\t\t\t *  and score values.  for some other reason, it is now excluded from output.\r\n\t\t\t\t *  this seems effective, but may cause problems later on.\r\n\t\t\t\t */\r\n\t\t\t\tif (curLine.equals("""")) {\r\n\t\t\t\t\tcurLine = ""exclude this line"";\r\n\t\t\t\t\tscore = -1;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// create the Tweet object and store it in sents[] for sorting\r\n\t\t\t\t// Note that this can be applied only to tweets with a score > 0 or some other\r\n\t\t\t\t// value, to reduce processing time.\r\n\t\t\t\t\r\n\t\t\t\tTweet tweet = new Tweet(curLine, score);\r\n\t\t\t\tsents[numLines] = tweet;\r\n\t\t\t\tscores[numLines] = score;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t}\r\n\t\t\tnumLines = numLines + 1;\r\n\t\t}\r\n\t\t\r\n\t\t// calculate idfs per word here\r\n\t\tfor (int n = 0; n < QUERY.length; n++) {\r\n\t\t\tdouble df = numLines / QUERY_COUNTS[n];\r\n\t\t\tdouble idf = java.lang.Math.log(df);\r\n\t\t\tQUERY_IDFS[n] = idf;\r\n\t\t}\r\n\t\t\r\n\t\t// add the idf for each query term that is in each tweet\r\n\t\t\r\n\t\tfor (int s = 0; s < sents.length; s++) {\r\n\t\t\tTweet curTweet = sents[s];\r\n\t\t\tint curScore = curTweet.getScore();\r\n\t\t\tString curMsg = curTweet.getMessage();\r\n\t\t\tString[] words = curMsg.split("" "");\r\n\t\t\tfor (int i=0; i < words.length; i++) {\r\n\t\t\t\tfor (int j=0; j < QUERY.length; j++) {\r\n\t\t\t\t\tString curWord = words[i].toLowerCase().replace(""?"", """").replace(""."", """").replace("","", """"); // make it lowercase and strip punctuation\r\n\t\t\t\t\tString curQueryWord = QUERY[j];\r\n\t\t\t\t\tif curWord.equals(curQueryWord) {\r\n\t\t\t\t\t\tint idfScore =  \r\n\t\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Sort the Tweets by score\r\n\t\ttry {\r\n\t\t\tArrays.sort(sents);\r\n\t\t} catch (NullPointerException o) {\r\n\t\t\t//result = result + Arrays.toString(o.getStackTrace()) + ""\\n"";\r\n\t\t}\r\n\t\t\r\n\t\t/*\r\n\t\t* This block of code and the ""result"" definition above construct a String of \r\n\t\t* Tweet messages and their score for easier output, if desired.\r\n\t\t// Construct the output String object\r\n\t\tfor (int n=0; n < sents.length-1; n++) {\r\n\t\t\ttry {\r\n\t\t\t\tString newLine = sents[n].getMessage() + "" score="" + Integer.toString(sents[n].getScore()) + ""\\n"";\r\n\t\t\t\tresult = result + newLine;\r\n\t\t\t} catch (NullPointerException o) {\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t\t*/\r\n\t\treturn sents;\r\n\t}\r\n\t\r\n\t/*\r\n\t *  arrangeTweets() reads an array of Tweets that has been sorted by score, removes redundant\r\n\t *  Tweets, and then returns a String containing each tweet in chronological order, delineated\r\n\t *  by the \\n character.\r\n\t *  \r\n\t *  @param sortedTweets\r\n\t *  @return String as detailed above \r\n\t */\r\n\t\r\n\tprotected String arrangeTweets(Tweet[] sortedTweets) throws Exception {\r\n\t\tString result = """";\r\n\t\t\r\n\t\t//placeholder\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/*\r\n\t *  computeSimilarity() uses the Jama library to compute a cosine similarity between\r\n\t *  tweets, to be used in redundancy removal.\r\n\t *  \r\n\t *  @params tweet1, tweet2\r\n\t *  @returns double Cosine similarity score\r\n\t *  \r\n\t */\r\n\t\r\n\tprotected double computeSimilarity(Tweet tweet1, Tweet tweet2) {\r\n\t\tdouble d = 0.0;\r\n//\t\tMatrix sourceDoc = new Matrix(tweet1.getMessage().split("" ""));\r\n\t\t\r\n\t\t//placeholder\r\n\t\t\r\n\t\treturn d;\r\n\t}\r\n\t\r\n\t\r\n\t/*\r\n\t *  makeResult() is used to read in the input stream from loadTwitter.  It was adopted from\r\n\t *  Scott Farrar's code for a similar purpose.\r\n\t */\r\n\t\r\n\tprivate String makeResult(InputStream inputStream) throws Exception {\r\n\t\tStringBuilder outputString = new StringBuilder();\r\n        \ttry{\r\n        \t\tString string;\r\n                \tif (inputStream != null){\r\n                \t\tBufferedReader reader = new BufferedReader(new\r\n                \t\tInputStreamReader(inputStream, ENCODING));\r\n\r\n                        while(null != (string = reader.readLine())){\r\n                                outputString.append(string).append('\\n');\r\n                        }\r\n                \t}\r\n        \t}\tcatch (Exception e) {\r\n                System.out.println(""Error reading stream."");\r\n        \t}\r\n        return outputString.toString();\r\n\t}\r\n\t\r\n\t/*\r\n\t *  doGet() is sort of like the server's main() method.  It is what receives the Http request,\r\n\t *  calls the other methods in this class, and creates and returns the Http response.\r\n\t *  \r\n\t *  At the moment, the simplest response is a large String object.  This object could then be\r\n\t *  parsed further on the mobile device, if necessary, or just printed as is in a TextView \r\n\t *  object.\r\n\t *  \r\n\t */\r\n\t\r\n\tpublic void doGet(HttpServletRequest req, HttpServletResponse resp)\r\n\t\t\tthrows IOException {\r\n\r\n\t\t// isGame == 0 if there is no game on the chosen date\r\n\t\tint isGame = 0;\r\n\t\tresp.setContentType(""text/plain"");\r\n\t\t\r\n\t\t// Get the query info\r\n\t\tString[] GETreport = req.toString().split(""\\n"");\r\n\t\tString firstLine = GETreport[0];\r\n\t\tString ModuleAndQuery = firstLine.split("" "")[1];\r\n\t\tString Query = ModuleAndQuery.split(""\\\\?"")[1];\r\n\t\tString teamName = Query.split("";"")[0].split(""="")[1];\r\n\t\tString Date = Query.split("";"")[1].split(""="")[1];\r\n\t\tString[] untilDateArray = Date.split(""-"");\r\n\t\tint day = Integer.parseInt(untilDateArray[2].trim()) + 1;\r\n\t\tString newDay = Integer.toString(day);\r\n\t\tif (newDay.length() == 1) {\r\n\t\t\tnewDay = ""0"" + newDay;\r\n\t\t}\r\n\t\tString untilDate = untilDateArray[0] + ""-"" + untilDateArray[1] + ""-"" + newDay; \r\n\t\tString curPath = new File(""."").getCanonicalPath();\r\n\t\t\r\n\t\t// Note that if we do any edit distance matching, it will have to occur before the \r\n\t\t// schedule file is loaded here.\r\n\t\tString scheduleName = teamName + ""_schedule"";\r\n\t\tString schedulePath = curPath + ""/"" + scheduleName;\r\n\t\tFile scheduleFile = new File(schedulePath);\r\n\t\tScanner sc = new Scanner(scheduleFile);\r\n\t\twhile (sc.hasNextLine()) {\r\n\t\t\tString curLine = sc.nextLine();\r\n\t\t\t//resp.getWriter().println(""'"" + curLine + ""' '"" + Date + ""'"");\r\n\t\t\tif (curLine.equals(Date)) {\r\n\t\t\t\tisGame = 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (isGame == 0) {\r\n\t\t\tresp.getWriter().println(""No game on that date, please choose again"");\r\n\t\t} else {\r\n\t\t\tresp.getWriter().println(""There is a game that day!"");\r\n\t\t}\r\n\t\t\r\n\t\t// These print statements were used to verify testing.  They can be removed if needed.\r\n\t\tresp.getWriter().println(teamName);\r\n\t\tresp.getWriter().println(Date);\r\n\t\tresp.getWriter().println(untilDate);\r\n\r\n\t\t// First, load the tweets from Twitter \r\n\t\tString tweets = loadTwitter(teamName, Date, untilDate);\r\n\t\t\r\n\t\t//test\r\n\t\tresp.getWriter().println(tweets);\r\n\t\t\r\n\t\t// Second, rank the tweets according the the algorithm in rankSentences()\r\n\t\t//String rankedTweets = """";\r\n\t\tTweet[] rankedTweets = {new Tweet(""this"", 1)};\r\n\t\ttry {\r\n\t\t\trankedTweets = rankSentences(tweets);\r\n\t\t} catch (Exception e) {\r\n\t\t\tresp.getWriter().println(e);\r\n\t\t\tresp.getWriter().println(Arrays.toString(e.getStackTrace()));\r\n\t\t\tresp.getWriter().println(e.getLocalizedMessage());\r\n\t\t\tresp.getWriter().println(e.getCause());\r\n\t\t}\r\n\t\t\r\n\t\t// finally, print the tweets along with their scores and "" it's working"" just for test purposes \r\n\t\tfor (int i = 0; i < rankedTweets.length; i++) {\r\n\t\t\tString curTweet = rankedTweets[i].getMessage();\r\n\t\t\tint score = rankedTweets[i].getScore();\r\n\t\t\tresp.getWriter().println(curTweet + "" "" + Integer.toString(score) + "" it's working"");\r\n\t\t}\r\n\t\t// Last, print the String output\r\n\t\t//resp.getWriter().println(rankedTweets);\r\n\t}\r\n}\r\n\r\n----------------------------------- SOURCE END -------------------------------------",1298847690908
error,log,,,"Problems occurred when invoking code from plug-in: ""org.eclipse.jdt.ui"".",1298847690909
error,log,,,"Error in JDT Core during reconcile",1298847690910
error,log,,,"Exception occurred during compilation unit conversion:\r\n----------------------------------- SOURCE BEGIN -------------------------------------\r\npackage edu.washington.ling;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.net.HttpURLConnection;\r\nimport java.net.URL;\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\nimport javax.servlet.http.HttpServlet;\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.servlet.http.HttpServletResponse;\r\n\r\nimport org.json.JSONArray;\r\nimport org.json.JSONObject;\r\n\r\n/*\r\n *  Authors: John Keesling and Anthony Wong\r\n *  Created for: Ling 575 - NLP on Mobile Devices\r\n * \r\n *  TPG_ServerServlet contains nearly all server-side processing components for the \r\n *  Twitter-based Play-by-play generator.  Among other things, it contains:\r\n *  1. A GET call to the Twitter Search API, which returns results in JSON format\r\n *  2. JSON processing to extract Tweet and timestamp information\r\n *  3. A sentence ranker that assigns scores to each Tweet based on a set of heuristics\r\n *  4. A redundancy remover that eliminates the most redundant sentences from output\r\n *  etc.  \r\n */\r\n\r\n@SuppressWarnings(""serial"")\r\npublic class TPG_ServerServlet extends HttpServlet {\r\n\t\r\n    private static final String ENCODING = ""UTF-8""; \r\n\tprivate static final String URL_BASE = ""http://search.twitter.com/search.json?q=%23"";\r\n\tprivate static final String MY_SITE = ""http://localhost:8888/"";\r\n\tpublic String otpt = """";\r\n\t\r\n\t/*\r\n\t *  QUERY is currently manually generated and maintained using WordNet relations.\r\n\t *  We chose to do this all manually in order to maximize the ease in which we could\r\n\t *  test different queries.  \r\n\t *  \r\n\t *  QUERY_COUNTS is an array that contains a corresponding int value for each query string.\r\n\t *  In rankSentences() below, each QUERY_COUNTS int is increased for each occurrence of a \r\n\t *  query term.  This is for use in a calculation of tf-idf (or just one or the other).\r\n\t */\r\n\tprivate static final String[] QUERY = {""shot"", ""attempt"", ""effort"", ""goal"", ""score"", ""assist"", ""play"", ""maneuver"", ""turnover"", ""penalty"", ""disadvantage"", ""powerplay"", ""block"", ""stop""};\r\n\tint[] QUERY_COUNTS = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\r\n\tdouble[] QUERY_IDFS = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};\r\n\t\r\n\t/* \r\n\t *  loadTwitter() calls the Twitter Search API and processes the JSON output.\r\n\t *  This occurs 15 times, as Twitter allows for a maximum of 15 pages of search results.\r\n\t *  Its parameters are determined by the query contained in the call to the server \r\n\t *  from the mobile device.  That step is contained in the doGet() method below.\r\n\t */\r\n\t\r\n\tprotected String loadTwitter(String teamName, String Date, String untilDate) {\r\n\t\tString result = """";\r\n\t\tString completeURL = URL_BASE + teamName + ""+since:"" + Date + ""&rpp=100"";\r\n\t\t\r\n\t\tfor (int p = 1; p < 6; p++) {\r\n\t\t\tint pageNum = p;\r\n\t\t\tcompleteURL = completeURL + ""&page="" + Integer.toString(pageNum);\r\n\t\t\t\r\n\t\t\t// Create and open the connection\r\n\t\t\ttry {\r\n\t\t\t\tHttpURLConnection conn = (HttpURLConnection) new URL(completeURL).openConnection();\r\n\t\t\t\tconn.setRequestProperty(""User-Agent"", ""Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.2.8) Gecko/20100722 Firefox/3.6.8"");\r\n\t\t\t\tconn.setRequestProperty(""REFERER"", MY_SITE);\r\n\t\t\t\tconn.setDoInput(true);\r\n\t\t\t\tconn.setDoOutput(true);\r\n            \r\n\t\t\t\t// Read in the input stream and process the JSON output\r\n\t\t\t\ttry {\r\n\t\t\t\t\tInputStream is = conn.getInputStream();\r\n\t\t\t\t\tString rawResult = makeResult(is);\r\n\t\t\t\t\tJSONObject JSONresult = new JSONObject(rawResult);\r\n\t\t\t\t\tString results = JSONresult.getString(""results"");\r\n\t\t\t\t\tJSONArray resultsArray = new JSONArray(results);\r\n\r\n\t\t\t\t\t// process the JSON object a bit more\r\n\t\t\t\t\tfor (int i = 0; i < resultsArray.length(); i++) {\r\n\t\t\t\t\t\tJSONObject curObj = resultsArray.getJSONObject(i);\r\n\t\t\t\t\t\tString curTweet = curObj.getString(""text"");\r\n\t\t\t\t\t\tresult = result + ""&&&"" + curTweet; \r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// close the connection etc.\r\n\t\t\t\t} finally {\r\n\t\t\t\t\tconn.getInputStream().close();\r\n\t\t\t\t\tif (conn.getErrorStream() != null)\r\n\t\t\t\t\t\tconn.getErrorStream().close();\r\n\t\t\t\t}\r\n\t\t\t} catch (Exception e) {\r\n\t\t\t}\r\n\t\t}\r\n        return result;\r\n\t}\r\n\t\r\n\t/*\r\n\t * rankSentences() contains the sentence ranking algorithm.  Among other things, this\r\n\t * might contain simple heuristics such as a comparison of timestamps (that would, for\r\n\t * example, prevent many Tweets that are in response to the same in-game event), an\r\n\t * implementation of TF-IDF (or just one or the other, depending on performance), and\r\n\t * other things that remain to be determined.\r\n\t * \r\n\t *   @param tweets\r\n\t *   @return an array of Tweets sorted by their score value (note that the code to return\r\n\t *   a string object has been commented out)\r\n\t */\r\n\t\r\n\tprotected Tweet[] rankSentences(String tweets) throws Exception {\r\n\t\t\r\n\t\t/*\r\n\t\t *  Note that this code contains two input schemas -- one for actually calling the\r\n\t\t *  Twitter Search API and one for loading the TPG_Server/war/test_input.txt file. \r\n\t\t *  This is made available to avoid being blacklisted by Twitter's search abuse police.\r\n\t\t *  To do one or the other might require more than just commenting out a block of code\r\n\t\t *  and uncommenting another.  If you encounter any problems, let John Keesling know.\r\n\t\t *  \r\n\t\t *  Also note that int[] scores is currently unused and most likely unnecessary.\r\n\t\t */\r\n\t\t\r\n\t\tTweet[] sents = new Tweet[501]; // this is a temp size initializer for String that should depend on the number of search results from twitter or something\r\n\t\tint[] scores = new int[501]; // also a temp size initializer\r\n\t\tString result = """";\r\n\t\tint numLines = 0;\r\n\t\t\r\n\t\t// the code below is only relevant for testing, when not querying from twitter\r\n\t\t/*\r\n\t\tString curPath = new File(""."").getCanonicalPath();\r\n\t\tString test_inputPath = curPath + ""/test_input.txt"";\r\n\t\tFile inputFile = new File(test_inputPath);\r\n\t\tScanner sc = new Scanner(inputFile);\r\n\t\t\r\n\t\t\r\n\t\tScanner sc = new Scanner(tweets);\r\n\t\t\r\n\t\t// assign a score to each sent, create a Tweet object for them, and put it in the corresponding cell in sents \r\n\t\twhile (sc.hasNextLine()) {\r\n\t\t\tint score = 0;\r\n\t\t\tString curLine = sc.nextLine();\r\n\t\t\tString[] words = curLine.split("" "");\r\n\t\t*/\r\n\t\t// this portion was only relevant for testing; everything below this point is relevant for everything else\r\n\t\t\r\n\t\t// the following code is only relevant for parsing real Twitter output\r\n\t\tString[] lines = tweets.split(""&&&"");\r\n\t\t\r\n\t\t\r\n\t\tfor (int u = 0; u < lines.length; u++) {\r\n\t\t\tint score = 0;\r\n\t\t\tString curLine = lines[u];\r\n\t\t\tString[] words = curLine.split("" "");\r\n\t\t\t\r\n\t\t\t// the portion above was only relevant for actually loading from the Twitter Search API\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t *  Assign scores to each Tweet and make a Tweet object that contains both the \r\n\t\t\t *  String message and the score.  This currently just compares each word in the\r\n\t\t\t *  Tweet to each word in the predefined QUERY.  However, this will later contain\r\n\t\t\t *  the other heuristics.  \r\n\t\t\t */\r\n\t\t\t\r\n\t\t\tfor (int i=0; i < words.length; i++) {\r\n\t\t\t\tfor (int j=0; j < QUERY.length; j++) {\r\n\t\t\t\t\tString curWord = words[i].toLowerCase().replace(""?"", """").replace(""."", """").replace("","", """"); // make it lowercase and strip punctuation\r\n\t\t\t\t\tString curQueryWord = QUERY[j];\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (curWord.equals(curQueryWord)) {\r\n\t\t\t\t\t\tscore++;\r\n\t\t\t\t\t\tQUERY_COUNTS[j] = QUERY_COUNTS[j]++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t/*  bug note: for some reason, a blank line was getting through.  it was \r\n\t\t\t\t *  proving difficult to handle, so i dealt with it by changing the string\r\n\t\t\t\t *  and score values.  for some other reason, it is now excluded from output.\r\n\t\t\t\t *  this seems effective, but may cause problems later on.\r\n\t\t\t\t */\r\n\t\t\t\tif (curLine.equals("""")) {\r\n\t\t\t\t\tcurLine = ""exclude this line"";\r\n\t\t\t\t\tscore = -1;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// create the Tweet object and store it in sents[] for sorting\r\n\t\t\t\t// Note that this can be applied only to tweets with a score > 0 or some other\r\n\t\t\t\t// value, to reduce processing time.\r\n\t\t\t\t\r\n\t\t\t\tTweet tweet = new Tweet(curLine, score);\r\n\t\t\t\tsents[numLines] = tweet;\r\n\t\t\t\tscores[numLines] = score;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t}\r\n\t\t\tnumLines = numLines + 1;\r\n\t\t}\r\n\t\t\r\n\t\t// calculate idfs per word here\r\n\t\tfor (int n = 0; n < QUERY.length; n++) {\r\n\t\t\tdouble df = numLines / QUERY_COUNTS[n];\r\n\t\t\tdouble idf = java.lang.Math.log(df);\r\n\t\t\tQUERY_IDFS[n] = idf;\r\n\t\t}\r\n\t\t\r\n\t\t// add the idf for each query term that is in each tweet\r\n\t\t\r\n\t\tfor (int s = 0; s < sents.length; s++) {\r\n\t\t\tTweet curTweet = sents[s];\r\n\t\t\tint curScore = curTweet.getScore();\r\n\t\t\tString curMsg = curTweet.getMessage();\r\n\t\t\tString[] words = curMsg.split("" "");\r\n\t\t\tfor (int i=0; i < words.length; i++) {\r\n\t\t\t\tfor (int j=0; j < QUERY.length; j++) {\r\n\t\t\t\t\tString curWord = words[i].toLowerCase().replace(""?"", """").replace(""."", """").replace("","", """"); // make it lowercase and strip punctuation\r\n\t\t\t\t\tString curQueryWord = QUERY[j];\r\n\t\t\t\t\tif curWord.equals(curQueryWord) {\r\n\t\t\t\t\t\tint idfScore =  \r\n\t\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Sort the Tweets by score\r\n\t\ttry {\r\n\t\t\tArrays.sort(sents);\r\n\t\t} catch (NullPointerException o) {\r\n\t\t\t//result = result + Arrays.toString(o.getStackTrace()) + ""\\n"";\r\n\t\t}\r\n\t\t\r\n\t\t/*\r\n\t\t* This block of code and the ""result"" definition above construct a String of \r\n\t\t* Tweet messages and their score for easier output, if desired.\r\n\t\t// Construct the output String object\r\n\t\tfor (int n=0; n < sents.length-1; n++) {\r\n\t\t\ttry {\r\n\t\t\t\tString newLine = sents[n].getMessage() + "" score="" + Integer.toString(sents[n].getScore()) + ""\\n"";\r\n\t\t\t\tresult = result + newLine;\r\n\t\t\t} catch (NullPointerException o) {\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t\t*/\r\n\t\treturn sents;\r\n\t}\r\n\t\r\n\t/*\r\n\t *  arrangeTweets() reads an array of Tweets that has been sorted by score, removes redundant\r\n\t *  Tweets, and then returns a String containing each tweet in chronological order, delineated\r\n\t *  by the \\n character.\r\n\t *  \r\n\t *  @param sortedTweets\r\n\t *  @return String as detailed above \r\n\t */\r\n\t\r\n\tprotected String arrangeTweets(Tweet[] sortedTweets) throws Exception {\r\n\t\tString result = """";\r\n\t\t\r\n\t\t//placeholder\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/*\r\n\t *  computeSimilarity() uses the Jama library to compute a cosine similarity between\r\n\t *  tweets, to be used in redundancy removal.\r\n\t *  \r\n\t *  @params tweet1, tweet2\r\n\t *  @returns double Cosine similarity score\r\n\t *  \r\n\t */\r\n\t\r\n\tprotected double computeSimilarity(Tweet tweet1, Tweet tweet2) {\r\n\t\tdouble d = 0.0;\r\n//\t\tMatrix sourceDoc = new Matrix(tweet1.getMessage().split("" ""));\r\n\t\t\r\n\t\t//placeholder\r\n\t\t\r\n\t\treturn d;\r\n\t}\r\n\t\r\n\t\r\n\t/*\r\n\t *  makeResult() is used to read in the input stream from loadTwitter.  It was adopted from\r\n\t *  Scott Farrar's code for a similar purpose.\r\n\t */\r\n\t\r\n\tprivate String makeResult(InputStream inputStream) throws Exception {\r\n\t\tStringBuilder outputString = new StringBuilder();\r\n        \ttry{\r\n        \t\tString string;\r\n                \tif (inputStream != null){\r\n                \t\tBufferedReader reader = new BufferedReader(new\r\n                \t\tInputStreamReader(inputStream, ENCODING));\r\n\r\n                        while(null != (string = reader.readLine())){\r\n                                outputString.append(string).append('\\n');\r\n                        }\r\n                \t}\r\n        \t}\tcatch (Exception e) {\r\n                System.out.println(""Error reading stream."");\r\n        \t}\r\n        return outputString.toString();\r\n\t}\r\n\t\r\n\t/*\r\n\t *  doGet() is sort of like the server's main() method.  It is what receives the Http request,\r\n\t *  calls the other methods in this class, and creates and returns the Http response.\r\n\t *  \r\n\t *  At the moment, the simplest response is a large String object.  This object could then be\r\n\t *  parsed further on the mobile device, if necessary, or just printed as is in a TextView \r\n\t *  object.\r\n\t *  \r\n\t */\r\n\t\r\n\tpublic void doGet(HttpServletRequest req, HttpServletResponse resp)\r\n\t\t\tthrows IOException {\r\n\r\n\t\t// isGame == 0 if there is no game on the chosen date\r\n\t\tint isGame = 0;\r\n\t\tresp.setContentType(""text/plain"");\r\n\t\t\r\n\t\t// Get the query info\r\n\t\tString[] GETreport = req.toString().split(""\\n"");\r\n\t\tString firstLine = GETreport[0];\r\n\t\tString ModuleAndQuery = firstLine.split("" "")[1];\r\n\t\tString Query = ModuleAndQuery.split(""\\\\?"")[1];\r\n\t\tString teamName = Query.split("";"")[0].split(""="")[1];\r\n\t\tString Date = Query.split("";"")[1].split(""="")[1];\r\n\t\tString[] untilDateArray = Date.split(""-"");\r\n\t\tint day = Integer.parseInt(untilDateArray[2].trim()) + 1;\r\n\t\tString newDay = Integer.toString(day);\r\n\t\tif (newDay.length() == 1) {\r\n\t\t\tnewDay = ""0"" + newDay;\r\n\t\t}\r\n\t\tString untilDate = untilDateArray[0] + ""-"" + untilDateArray[1] + ""-"" + newDay; \r\n\t\tString curPath = new File(""."").getCanonicalPath();\r\n\t\t\r\n\t\t// Note that if we do any edit distance matching, it will have to occur before the \r\n\t\t// schedule file is loaded here.\r\n\t\tString scheduleName = teamName + ""_schedule"";\r\n\t\tString schedulePath = curPath + ""/"" + scheduleName;\r\n\t\tFile scheduleFile = new File(schedulePath);\r\n\t\tScanner sc = new Scanner(scheduleFile);\r\n\t\twhile (sc.hasNextLine()) {\r\n\t\t\tString curLine = sc.nextLine();\r\n\t\t\t//resp.getWriter().println(""'"" + curLine + ""' '"" + Date + ""'"");\r\n\t\t\tif (curLine.equals(Date)) {\r\n\t\t\t\tisGame = 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (isGame == 0) {\r\n\t\t\tresp.getWriter().println(""No game on that date, please choose again"");\r\n\t\t} else {\r\n\t\t\tresp.getWriter().println(""There is a game that day!"");\r\n\t\t}\r\n\t\t\r\n\t\t// These print statements were used to verify testing.  They can be removed if needed.\r\n\t\tresp.getWriter().println(teamName);\r\n\t\tresp.getWriter().println(Date);\r\n\t\tresp.getWriter().println(untilDate);\r\n\r\n\t\t// First, load the tweets from Twitter \r\n\t\tString tweets = loadTwitter(teamName, Date, untilDate);\r\n\t\t\r\n\t\t//test\r\n\t\tresp.getWriter().println(tweets);\r\n\t\t\r\n\t\t// Second, rank the tweets according the the algorithm in rankSentences()\r\n\t\t//String rankedTweets = """";\r\n\t\tTweet[] rankedTweets = {new Tweet(""this"", 1)};\r\n\t\ttry {\r\n\t\t\trankedTweets = rankSentences(tweets);\r\n\t\t} catch (Exception e) {\r\n\t\t\tresp.getWriter().println(e);\r\n\t\t\tresp.getWriter().println(Arrays.toString(e.getStackTrace()));\r\n\t\t\tresp.getWriter().println(e.getLocalizedMessage());\r\n\t\t\tresp.getWriter().println(e.getCause());\r\n\t\t}\r\n\t\t\r\n\t\t// finally, print the tweets along with their scores and "" it's working"" just for test purposes \r\n\t\tfor (int i = 0; i < rankedTweets.length; i++) {\r\n\t\t\tString curTweet = rankedTweets[i].getMessage();\r\n\t\t\tint score = rankedTweets[i].getScore();\r\n\t\t\tresp.getWriter().println(curTweet + "" "" + Integer.toString(score) + "" it's working"");\r\n\t\t}\r\n\t\t// Last, print the String output\r\n\t\t//resp.getWriter().println(rankedTweets);\r\n\t}\r\n}\r\n\r\n----------------------------------- SOURCE END -------------------------------------",1298847691085
error,log,,,"Problems occurred when invoking code from plug-in: ""org.eclipse.jdt.ui"".",1298847691087
error,log,,,"Error in JDT Core during AST creation",1298847691088
executed,command,org.eclipse.ui.workbench.texteditor,3.6.1.r361_v20100714-0800,"org.eclipse.ui.edit.text.goto.textStart",1298847697208
